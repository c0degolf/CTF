from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import hashlib

p = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f
a = 0
b = 0x7
n = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141

# secp256k1
E1 = EllipticCurve(Zmod(p), [a, b])
G = E1(0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798, 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8)

# ?
E2 = EllipticCurve(Zmod(n), [a, b])

Q = (101771283327156084659353063848614878366203908666060023472391215012490607002880, 96722247182799190833290622222803256903653594872840649926105708323029018483395)
msgs = ['The quick brown fox jumps over the lazy dog.', 'Always look on the bright side of life.', 'To be or not to be, that is the question.', 'The early bird catches the worm.', 'Actions speak louder than words.', 'A picture is worth a thousand words.', 'When in Rome, do as the Romans do.', "You can't judge a book by its cover.", 'Better late than never.', 'Practice makes perfect.', 'A watched pot never boils.', 'All that glitters is not gold.', 'Every cloud has a silver lining.', 'The pen is mightier than the sword.', 'A journey of a thousand miles begins with a single step.', 'Absence makes the heart grow fonder.', 'Beauty is in the eye of the beholder.', 'Birds of a feather flock together.', "Don't bite the hand that feeds you.", "Don't count your chickens before they hatch.", "Don't put all your eggs in one basket.", "Rome wasn't built in a day.", 'The grass is always greener on the other side.', "There's no place like home.", 'Two heads are better than one.']
sigs = [(106059375599391746052146068427926810419259542667579843559587625724020715481993, 14894666405908929012344942338490951063382876903139526755904223484818153680804), (104990836823846733680863291917024091431376560811383196362861378122817086158507, 56399841029707042110721910489639588085787492076041615445725419455587309742918), (84913798855561246181893801055266767357472752425772341625290220041678095215055, 23935771345496844415260461560933712691171725609780640565646508776162352523410), (27261236028744023998645701553032367210553788639532757597228499080167643622645, 106710118788321238680967003040177854409919458850384406185268581531367068094923), (110124148707505411756042758633382707640037999997492812548585730456362715361664, 12307710963283086478169291771879256088000174049979822607549658347909021931437), (21182114845086513264460139757088475717502212719890226343818237791136825420599, 94059445759760895052287490700282939522806062111161707681000258716320937662923), (58731926292671217030427099476475423984183351853620536815813104403271382065840, 105877382863403162379344238561839274224882284145963245118008458427904609189476), (22540425029876727389300572084325425593869093137767654958859378554197990053368, 30100266264273419232082755670495726387296067769095243652529844899363670551954), (109320089971862062794946990338204349526263206059353828753711539593500046587202, 94294660769892882529392901148534058769971549221977142571073740805233336062677), (71972649257738705618782615824288644088173398673997859341551130895088351764069, 99700240101604372783712564608900732911821247086843514327602137348159642188110), (63074762747283518494532235774327653830597804376254445128538474786164453857854, 65957889946382863174788803616589542075668764662065557310794523540844906005956), (32748217778464306142820329642014623734484696496115405589031434754390016089567, 35115967264332306890866786296916774696413070439548091446491060929056372740363), (95570434779680764822063655243986713703432300827753611949981144707311302134909, 107759109781551327111500080111412031535884322852369667575451934630528774404543), (98710147574962756293925520255611251110714553046834773505569632384227575441069, 105858945529760642012055654042257544229753475176866004615440544638435345772969), (51550874555613397803803897955718998711682478680213784770847470408900072927318, 44223476351370277868419624961811602523688745716120876510309897187624778118345), (88879132769761139046340681004966262786751996073475031258142573569588480744732, 83572251118605756968312147358575735686070800479240892335569419180803682922420), (81608563524204440350731004098220598321141841846170844060868327638823595516783, 6593817391749940832806540015472159470431434333750308560963325356464994494407), (12319532588793482058725563837217808159699999950677194930559548606369079292890, 64884206359613383832286961022652399720252261541710451251950757030414349957184), (77600709177053506396297486733954904762580924340158609598885507490926828309530, 33601406150462851578480038313843963644877378247134488359858061518192480803853), (81967696234937664542619828430828920924851818049092246475228889996353139438971, 51882991882310859271780232772015329220370453416194257610186034605303914876031), (113086392981912607459028017700063493544965946462352196268365729999799503650234, 26952847818075686188627622815568579659244087506927214238505498257760460127601), (32809203173634113751578160317188542231816216120037260541504402245534919200782, 56928736303499921889205077265238389398090906134671651439493288335616266830522), (43917083633922735364264527853191366898572198634185783257160917188284620753779, 73926722367913458655500233646290002704405594344282994106907185543659702951659), (7878402091460443678102231026895677888326830945693889393021493227895161154061, 40227338889391953852262442264421418562886733715383658400419593530331841372768), (34867193714884778696503139062981161105800670729437772556864769988859984282200, 25439509187599165530413571858923502612175411947644696814043151780040264375740)]
enc = "b982f43a7634f02ec841f1c93f06775fc7c3228b8c09be6691e610b8e687dbb6fe7a97e9911d33a39cdac9b247b3e89c16a2ab775ca1b8b0b2e6bc2715fee84510f6f6318c69823a60fa8dc7df7c426b"

F = GF(n)
P.<d, Dx> = PolynomialRing(F)

xs = []
for sig, m in zip(sigs, msgs):
    ri, si = sig

    Hi = int.from_bytes(hashlib.sha256(m.encode()).digest(), 'big')
    xs.append( F(si)^-1 * ( Hi + d * ri ) )

eqs = []
for i in range(len(xs)-1):
    eq = (( Dx + xs[i] + xs[i+1] ) * (Dx - xs[i])^2 - Dx^3 - xs[i]^3 - 14)^2 - 4*( Dx^3 + 7 ) * ( xs[i]^3 + 7 )
    eqs.append(eq)

I = P.ideal(eqs)
d = I.variety()[0][d]

key = int(d).to_bytes(32, 'big')
cipher = AES.new(key, AES.MODE_ECB)

raise ZeroDivisionError( unpad( cipher.decrypt(bytes.fromhex(enc)), 16).decode().strip() )